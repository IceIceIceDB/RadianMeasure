public class RadianMeasureVersion2_quadrantShift {
	
	public static final double E = 2.7182818284590452354;
	 
    public static final double PI = 3.14159265358979323846;
    
    public static int q=-1;
    
    public static double toRadians(double angdeg) {
        return angdeg / 180.0 * PI;
    }
 
    public static double toDegrees(double angrad) {
    	return angrad * 180.0 / PI;
    }
    
    //Shift input to a radian in quadrant 1
    //check which quadrant the input in and set the q as quadrant number. 0-PI/2:1, PI/2-PI:2, PI-3*PI/2:3, 3*PI/2-2*PI:4
    public static double quadrantShift(double a) {
    	double temp=a%(2*PI);
    	//transform negetive to postive
    	if(temp<0) {
    		temp=temp+2*PI;
    	}
    	//quadrant 1
    	if(temp<=(PI/2)) {
    		q=1;
    	}
    	//quadrant 2
    	else if(temp<=PI && temp>(PI/2)) {
    		temp=PI-temp;
    		q=2;
    	}
    	//quadrant 3
    	else if(temp>PI&&temp<=3*PI/2) {
    		temp=temp-PI;
    		q=3;
    	}
    	//quadrant 4
    	else {
    		temp=2*PI-temp;
    		q=4;
    	}    	    	    	
    	return temp;
    }  
    //Get a power n
    public static double power(double a, int n) {
    	
    	double result=1;
    	for(int i=0;i<n;i++) {
    		result=result*a;
    	}
    	return result;
    }
    
    //Bernoulli numbers Bn
    public static double[] Bernoulli() {
    	double[] result= {0.0,1.0/6.0,1.0/30.0,1.0/42.0,1.0/30.0,5.0/66.0,691.0/2730.0,7.0/6.0,3617.0/510.0,43867.0/798.0,174611.0/330.0};    	
    	return result;
    }
    
    /*
    default input type if radian.
    */
    
    public static double sin(double a) {
    	double sum=0,temp=1;
    	for(int i = 3; i<=21; i=i+2) {
    		for(int j=i;j>0;j--) {
    			temp=temp*a/j;
    		}
    		sum=sum+temp;
    	}
    	return sum;
    }
    
    public static double cos(double a) {
    	double sum=0,temp=1;
    	for(int i = 2; i<=20; i=i+2) {
    		for(int j=i;j>0;j--) {
    			temp=temp*a/j;
    		}
    		sum=sum+temp;
    	}
    	return sum;
    }
    
    public static double factorial(int a) {
    	double result=1;
    	for(double i=1;i<=a;i++) {
    		result=result*i;
    	}
    	return result;
    }

    public static double tan(double a) {
    	a=quadrantShift(a);
    	double[] bernoulli=new double[11];
    	bernoulli=Bernoulli();
    	double temp;
    	double sum=0;
    	for(int i=1;i<=10;i++) {
    		temp=power(2,2*i)*(power(2,2*i)-1)*bernoulli[i]*power(a,2*i-1)/factorial(2*i);
    		sum=sum+temp;
    	}
    	if(q==2 || q==4) {
    		sum=0-sum;
    	}
    	q=-1;
    	return sum;
    }
}
